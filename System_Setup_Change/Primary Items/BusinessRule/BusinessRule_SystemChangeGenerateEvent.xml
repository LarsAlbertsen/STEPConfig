<?xml version="1.0" encoding="UTF-8"?>
<STEP-ProductInformation ContextID="Context1" WorkspaceID="Main" UseContextLocale="false">
    <BusinessRules>
        <BusinessRule ID="SystemChangeGenerateEvent" Scope="Global" Type="Action" RunPrivileged="true"><!-- Definition:
Action #1 (JavaScriptBusinessActionWithBinds):
<config>
  <bindings>
    <binding alias="node" type="Node" contract="CurrentObjectBindContract"/>
    <binding alias="SystemChangeObjType" type="ObjectType" contract="ObjectTypeBindContract">
      SystemChange
    </binding>
    <binding alias="SystemChangeDateObjType" type="ObjectType" contract="ObjectTypeBindContract">
      SystemChangeDate
    </binding>
    <binding alias="SystemChangeUserObjType" type="ObjectType" contract="ObjectTypeBindContract">
      SystemChangeUser
    </binding>
    <binding alias="SystemChangeYearObjType" type="ObjectType" contract="ObjectTypeBindContract">
      SystemChangeYear
    </binding>
    <binding alias="SystemChangeMonthObjType" type="ObjectType" contract="ObjectTypeBindContract">
      SystemChangeMonth
    </binding>
    <binding alias="SystemChangesRoot" type="Classification" contract="ClassificationBindContract">
      SystemChangesRoot
    </binding>
  </bindings>
  <messages/>
  <javaScript>
if (node!=null) {
	logger.info("Workspace "+node.getManager().getCurrentWorkspace().getID());
	if (node.getManager().getCurrentWorkspace().getID().equals("Approved")) {
		logger.info("Creating main node");
		var mainManager = node.getManager();
		mainManager.executeInWorkspace("Main", function(mainManager) {
			var mainNode = mainManager.getObjectFromOtherManager(node);
			handleNode(mainNode);
			return;
		 });
	}
	else {
		handleNode(node);
	}
}

function handleNode(pNode) {
	if (pNode!=null) {
		var url = pNode.getURL();
		logger.info("SystemChangeGenerateEvent Type="+pNode.getClass().getName()+" URL="+url);
		var type = pNode.getClass().getSimpleName().replace("Front", "").replace("Impl", "");
		var id = pNode.getID();
		var user = pNode.getManager().getCurrentUser();
		var configRoot = pNode.getManager().getClassificationHome().getClassificationByID("SystemChangesRoot");

		var now = new java.util.Date();
		var currentLocale = java.util.Locale.getDefault();
		var dateFormat = java.text.DateFormat.getDateInstance(java.text.DateFormat.DEFAULT, currentLocale);
		var dateString = dateFormat.format(now);


		var userDateClassification = getUserClassification2(configRoot, user, now);

	
		var changeName = type+" ID="+id;
		var existingChanges = userDateClassification.getChildren();
		for (var i=0; i<existingChanges.size(); i++) {
			if (changeName.equals(existingChanges.get(i).getName())) {
				logger.info("Found existing change for "+existingChanges.get(i).getTitle());
				return;
			}
		}
		var c = userDateClassification.createClassification("", SystemChangeObjType.getID());
		c.setName(changeName);
	}
	else {
		logger.info("SystemChangeGenerateEvent No Node");
	}
}



//
// get or create classification for the give user on the given date organized in data hierarchy
//
function getUserClassification2(pConfigRoot, pUser, pNow) {
	var formatter = new java.text.SimpleDateFormat("yyyy/MM/dd");  
	var dateString = formatter.format(pNow);

	var id = "SystemChange "+dateString+"/"+pUser.getID();
	var userCls = pConfigRoot.getManager().getClassificationHome().getClassificationByID(id);
	if (userCls==null) {
		//logger.info("Did not userCls ["+id+"]");
		var dateCls = getDateClassification2(pConfigRoot, pNow);
		userCls = dateCls.createClassification(id, SystemChangeUserObjType.getID());
		userCls.setName(pUser.getTitle());
	}
	return userCls;
}

function getDateClassification2(pConfigRoot, pNow) {
	//var formatter = new java.text.SimpleDateFormat("dd/MM/yyyy HH:mm:ss");  
	var formatter = new java.text.SimpleDateFormat("yyyy/MM/dd");  
	var dateString = formatter.format(pNow);

	var id = "SystemChange "+ dateString;
	var dateCls = pConfigRoot.getManager().getClassificationHome().getClassificationByID(id);
	logger.info("Found date "+dateCls);
	if (dateCls==null) {
		logger.info("Create date ["+id+"]");
		var monthCls = getMonthClassification2(pConfigRoot, pNow);
		dateCls = monthCls.createClassification(id, SystemChangeDateObjType.getID());
		dateCls.setName(dateString);
		logger.info("Created day");
	}
	return dateCls;
}

function getMonthClassification2(pConfigRoot, pNow) {
	//var formatter = new java.text.SimpleDateFormat("dd/MM/yyyy HH:mm:ss");  
	var formatter = new java.text.SimpleDateFormat("yyyy/MM");  
	var dateString = formatter.format(pNow);

	var id = "SystemChange "+ dateString;
	var monthCls = pConfigRoot.getManager().getClassificationHome().getClassificationByID(id);
	logger.info("Found month "+monthCls);
	if (monthCls==null) {
		logger.info("Create month ["+id+"]");
		var yearCls = getYearClassification2(pConfigRoot, pNow);
		logger.info("Got year - creating ["+id+"]");
		monthCls = yearCls.createClassification(id, SystemChangeMonthObjType.getID());
		monthCls.setName(dateString);
		logger.info("Create month");
	}
	return monthCls;
}

function getYearClassification2(pConfigRoot, pNow) {
	//var formatter = new java.text.SimpleDateFormat("dd/MM/yyyy HH:mm:ss");  
	var formatter = new java.text.SimpleDateFormat("yyyy");  
	var dateString = formatter.format(pNow);

	var id = "SystemChange "+ dateString;
	logger.info("Look for ["+id+"]");
	var yearCls = pConfigRoot.getManager().getClassificationHome().getClassificationByID(id);
	logger.info("Found "+yearCls);
	if (yearCls==null) {
		logger.info("Create year ["+id+"] below ["+SystemChangesRoot.getID()+"]");
		yearCls = pConfigRoot.createClassification(id, SystemChangeYearObjType.getID());
		yearCls.setName(dateString);
		logger.info("Created year");
	}
	return yearCls;
}
  </javaScript>
</config> -->
            <SetupGroupLink SetupGroupID="TrackChanges"></SetupGroupLink>
            <Name QualifierID="Qualifier root">System Change Generate Event</Name>
            <OnApprove ApproveSetup="Never"></OnApprove>
            <Configuration>H4sIAAAAAAAAAM1ZbU/bSBD+HP+KvXxAQVC7d59ODaGCUFoqQqsCqqrTCS32JtnWsd3dNZCe+O83sy/2Ok4g9C6oCIR3vTPzzOzzzNpJkZYTnl3Rokg5k1d8fBXn2ZhP9iRMqP3C3DZzg73Xd7OU3DAheZ4Nur+HL7uEZXGe8Gwy6F5eHL/4s/t6P9g7LCXPmJSfypTtB4RUEx+1O+LfN1MnR4Pue3pDz2PBC+XuH8QKAn3manrIs0R20Rd4+0gFnTEFMMyEP0XQk1lNLuYFG3S/gtswpdkkPFcCgHb3t1LVb2Sy9b3MVR/SMRd1TmasEzOXr7cmqh+gA4wxooUeE+JmCFRKCRorgGEshqUQLFMfrr+yWOGSoV1hYx2knEq7NssTZqerhIYpldX9Mk3NVfRoXBMQS/BI0PO5VGw2nEKFGBihxUMY4nwWSsWv8zDOBQuTfEZ5FvJZkYZ1yBMYmuWI04+AgCNEtJkEjqh6hiQwyoYTuZRMbD4RjLLhRL4w+gyJYJQNJzKCZdPNZ6LDrJ+KjszHPKbYKp+QjvyU5+on8zgWEKMZeXVCJlAjoWrkGuheVEFY0dLfCJGLEZwJFDxuuLWf5jFN+Q96nTIb8YJBeiD6wzJLUhatibk+0FYD5mPSw7b/2wCb+zb5J+ik+WTCRMizcd4z0D7n4pssaMyIGe+gRThhakQzQCd62ziwJ0212MyeHPW2t/tBxwV6glnIvpc0lRbEQVGI/IYlZrStoS7BOhQMCJFNCNKF1CcaYujcUKHnLQAyIC1IuMxbErI7FpeKnWQ1QONwBIvM1S4Zl5l+VOh5lgZgFfIMAkE83zWENYoEPs8+qCkTDgWi0kg6QGHYcTTuOS/mhmCqFBleknucuQ86LJVMB/WMnKf74D4IHEziLSi0SzTDHdIjjwsafilSQK5vIebLT6emTO3i+7p7yzImgLNvbmB3Df8seypPWsJmv8+At73tHasSCOEWQ/Bq6xQ48ZF49ufYGJjxEgoGaqk2SncLt1O2RxhKLCyse8jCOhefJ350pKi7U0rNpureMobjYVdbmEda7E2r7Rod7l0+Y8vmD+cA5MH+CjFt0Cy/Rc6zW6I7Qal4GuLDhAfLYNUtCGtdrzNTGP+IjWmZqtooARfHuZhR5SwUu1Pas5nWVhRVJBXNoOBLFx29OT64PL3YbYJoRDFtC6LUIcOx/gdMv8VEvQ1B181agSESWNqTppr/o1dvx6623SXWX8cVRlcVCQZOkIiOq9VRuMMTB5XdcYlNyG4FWCzHo3dzytME0jXlhGRIT3Nt8LJPOB4HC85CyX/ghhG+s2N7DCq3xufa5qIdxOpxT2y2hS7T8XEOB02Vhc2dIDab6mrfF1ylzLT8RpfCBqX/dDFXVyTG/r0w2fPVuEuWvDH4J00nDqXNsS7KYot8Su86y8lZ4xzRzTQIogh+kVAECmNwk7jJNywZNHYy4TfMNAmYdBOZZjEYT2gGe5oQrmcomXKILuLpHENUTXsFc4uhR93iUnMX+smt3l0sttGHMsedk77WnmmatQJtJebwE41GUeLO2j4hQVuClV+nQB0VJVP1ynZlHYFqTzvujdIeDpiB116dmIcpyshL9r+0S564RxLreuAdeVHUJscRpJNBq3ZI/qokb+H/vXBUJJrE0jScNs0Xt81UrtOpM7UOluuBJ00VeG9rDSVYd5UequJ6KgVVGJW65PqNR4W14WPtouinCJckSDekHXn37tVs9krKReb9kiT2XPWDhW3/X5m6qkPr/uEpCkI7YtuhT+wVD8vMuHmU0jN8M6w4PTKjdUhdF8W5WI/V3ocpDVY7aThW17uw4rHUpInlmvtN3PHe+mvxfs0Uf03iPyfrPWY8C+11PAfHBXfEd+O1mG88PUr9OaOiYv4XPViH+O2wb+EMQWfkhXlgwO14MLpXWgtiPe34nxY1xFNJ8InqMaVaJh/nsaWf9Qr1C8rnubTTrvVpnn/TD40PkaLJyGdRnEVjozqp2eFaStOsb2dFrlkKL6XuRusN1nF3iTSWl2AtdXgfCjfE4ST25JMFDZdpwzoEabQ+rvMm9PdIe1HzW6r9oJ4xX2TZ78T+Ba6V314zGwAA</Configuration>
            <ValidObjectTypes AllObjectTypesValid="true"></ValidObjectTypes>
        </BusinessRule>
    </BusinessRules>
</STEP-ProductInformation>